local platypus= require "platypus.platypus"
function init(self)
	self.lookingAt=1
	dmg=1
	self.input_state = {}
	self.platypus = platypus.create({
		collisions = {
			separation = platypus.SEPARATION_RAYS,
			groups = {
				[hash("ground")] = platypus.DIR_ALL,
				[hash("onewayplatform")] = platypus.DIR_ALL,
				[hash("onewayplatform")] = platypus.DIR_DOWN,
				[hash("onewaydoor")] = platypus.DIR_LEFT,
				--[hash("enemy")] = dumdum.nme,
			},
			left = 10, right = 10, top = 10, bottom = 10, offset = vmath.vector3(0, 0, 0)
		},
		gravity=0,
		--debug=true,
	}
)
-- Add initialization code here
-- Learn more: https://defold.com/manuals/script/
-- Remove this function if not needed
end

function final(self)
-- Add finalization code here
-- Learn more: https://defold.com/manuals/script/
-- Remove this function if not needed
end

function update(self, dt)
	local wall_contact = self.platypus.has_wall_contact()
	print(self.lookingAt)

if self.lookingAt==1 then
	self.platypus.left(900)
	--print("disparar a la izquierda")
elseif self.lookingAt==2 then
	self.platypus.right(900)
	--print("disparar a la izquierda")
else
	print("???")
end

if active and not wall_contact then
	timer.delay(4, false, function() go.delete(); print("deleted by time"); msg.post("mona#mona", "bulletDed") end)

end
-- Add update code here
-- Learn more: https://defold.com/manuals/script/
-- Remove this function if not needed
self.platypus.update(dt)
end

function on_message(self, message_id, message, sender)
self.platypus.on_message(message_id, message, sender)
--el funcionamiento de la bala es bastante meh, básicamente la mona envía un mensaje al script para generar una bala mediante
--mensajes, y luego el script devuelve a la mona que la bala se destruyó y que puede disparar otra vez.
--La bala puede morir por chocar o, de no chocar, por tiempo.
if message_id==hash("lookingLeft") then
	sprite.set_hflip("#sprite", true)
	self.lookingAt=1
	active=true
elseif message_id==hash("lookingRight") then
	sprite.set_hflip("#sprite", false)
	self.lookingAt=2
	active=true
elseif message_id == platypus.WALL_CONTACT then
	print("Wall contact")
	--timer.delay(0.08, false, function() msg.post("mona#mona", "bulletDed"); go.delete() end)
	timer.delay(0.08, false, function()  go.delete() end)
	--go.delete()
	--timer.delay(0.2, false, function() msg.post("mona#mona", "bulletDed") end)
elseif message_id == hash("collision_response") then --esto podría ser simplemente un OR para esa dos situaciones pero meh
	-- take action
	go.delete()
	--msg.post("mona#mona", "bulletDed")
	msg.post(message.other_id, "bulletHit")
	print("I collided with", message.other_id)

end
-- Add message-handling code here
-- Learn more: https://defold.com/manuals/message-passing/
-- Remove this function if not needed
end

function on_input(self, action_id, action)
-- Add input-handling code here. The game object this script is attached to
-- must have acquired input focus:
--
--    msg.post(".", "acquire_input_focus")
--
-- All mapped input bindings will be received. Mouse and touch input will
-- be received regardless of where on the screen it happened.
-- Learn more: https://defold.com/manuals/input/
-- Remove this function if not needed
end

function on_reload(self)
-- Add reload-handling code here
-- Learn more: https://defold.com/manuals/hot-reload/
-- Remove this function if not needed
end